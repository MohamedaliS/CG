<div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Customize Template</h1>
                <p class="mt-2 text-sm text-gray-600">Create your personalized certificate with real-time preview</p>
            </div>
            <a href="/templates/select" class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-4 py-2 rounded-lg transition-colors flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                </svg>
                Back to Templates
            </a>
        </div>
    </div>

    <div class="grid grid-cols-1 xl:grid-cols-3 gap-8">
        <!-- Customization Panel -->
        <div class="xl:col-span-1 space-y-6">
            <!-- Template Selection -->
            <div class="bg-white shadow rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Base Template</h3>
                <select id="template-select" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Loading templates...</option>
                </select>
                <p class="mt-2 text-sm text-gray-500">Choose a base template to customize</p>
            </div>

            <!-- Colors -->
            <div class="bg-white shadow rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Colors</h3>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Primary Color</label>
                        <div class="flex items-center space-x-3">
                            <input type="color" id="primary-color" value="#2563eb" 
                                   class="h-10 w-16 border border-gray-300 rounded-md cursor-pointer">
                            <input type="text" id="primary-color-hex" value="#2563eb" 
                                   class="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Background Color</label>
                        <div class="flex items-center space-x-3">
                            <input type="color" id="background-color" value="#ffffff" 
                                   class="h-10 w-16 border border-gray-300 rounded-md cursor-pointer">
                            <input type="text" id="background-color-hex" value="#ffffff" 
                                   class="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm">
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Text Color</label>
                        <div class="flex items-center space-x-3">
                            <input type="color" id="font-color" value="#000000" 
                                   class="h-10 w-16 border border-gray-300 rounded-md cursor-pointer">
                            <input type="text" id="font-color-hex" value="#000000" 
                                   class="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm">
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Border Color</label>
                        <div class="flex items-center space-x-3">
                            <input type="color" id="border-color" value="#d1d5db" 
                                   class="h-10 w-16 border border-gray-300 rounded-md cursor-pointer">
                            <input type="text" id="border-color-hex" value="#d1d5db" 
                                   class="flex-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Typography -->
            <div class="bg-white shadow rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Typography</h3>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Font Family</label>
                        <select id="font-family" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="Arial">Arial</option>
                            <option value="Times New Roman">Times New Roman</option>
                            <option value="Helvetica">Helvetica</option>
                            <option value="Georgia">Georgia</option>
                            <option value="Verdana">Verdana</option>
                            <option value="Palatino">Palatino</option>
                            <option value="Garamond">Garamond</option>
                            <option value="Trebuchet MS">Trebuchet MS</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Title Font Size</label>
                        <div class="flex items-center space-x-3">
                            <input type="range" id="title-font-size" min="24" max="120" value="48" 
                                   class="flex-1">
                            <span id="title-font-size-value" class="text-sm font-medium text-gray-700 w-16">48px</span>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Name Font Size</label>
                        <div class="flex items-center space-x-3">
                            <input type="range" id="name-font-size" min="16" max="80" value="36" 
                                   class="flex-1">
                            <span id="name-font-size-value" class="text-sm font-medium text-gray-700 w-16">36px</span>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Course Font Size</label>
                        <div class="flex items-center space-x-3">
                            <input type="range" id="course-font-size" min="12" max="60" value="24" 
                                   class="flex-1">
                            <span id="course-font-size-value" class="text-sm font-medium text-gray-700 w-16">24px</span>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Font Weight</label>
                        <select id="font-weight" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="normal">Normal</option>
                            <option value="bold" selected>Bold</option>
                            <option value="lighter">Light</option>
                            <option value="100">100</option>
                            <option value="300">300</option>
                            <option value="500">500</option>
                            <option value="700">700</option>
                            <option value="900">900</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Layout & Positioning -->
            <div class="bg-white shadow rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Layout & Positioning</h3>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Text Alignment</label>
                        <div class="flex space-x-2">
                            <button type="button" id="align-left" class="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:ring-2 focus:ring-blue-500">
                                Left
                            </button>
                            <button type="button" id="align-center" class="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 bg-blue-50 border-blue-300">
                                Center
                            </button>
                            <button type="button" id="align-right" class="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:ring-2 focus:ring-blue-500">
                                Right
                            </button>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Text X Position</label>
                            <input type="number" id="text-x" value="400" min="0" max="1000" 
                                   class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Text Y Position</label>
                            <input type="number" id="text-y" value="300" min="0" max="800" 
                                   class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Line Spacing</label>
                        <div class="flex items-center space-x-3">
                            <input type="range" id="line-spacing" min="1" max="3" step="0.1" value="1.5" 
                                   class="flex-1">
                            <span id="line-spacing-value" class="text-sm font-medium text-gray-700 w-16">1.5</span>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Certificate Padding</label>
                        <div class="flex items-center space-x-3">
                            <input type="range" id="padding" min="10" max="100" value="40" 
                                   class="flex-1">
                            <span id="padding-value" class="text-sm font-medium text-gray-700 w-16">40px</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Logo & Branding -->
            <div class="bg-white shadow rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Logo & Branding</h3>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Logo Upload</label>
                        <input type="file" id="logo-upload" accept="image/*" 
                               class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                        <p class="mt-1 text-xs text-gray-500">Recommended: PNG or JPG, max 2MB</p>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Logo Size</label>
                            <div class="flex items-center space-x-3">
                                <input type="range" id="logo-size" min="50" max="300" value="100" 
                                       class="flex-1">
                                <span id="logo-size-value" class="text-sm font-medium text-gray-700 w-16">100px</span>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Logo Position</label>
                            <select id="logo-position" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                                <option value="top">Top</option>
                                <option value="bottom">Bottom</option>
                                <option value="left">Left</option>
                                <option value="right">Right</option>
                                <option value="center">Center</option>
                            </select>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Organization Name</label>
                        <input type="text" id="organization-name" placeholder="Your Organization" 
                               class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                </div>
            </div>

            <!-- Border & Effects -->
            <div class="bg-white shadow rounded-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Border & Effects</h3>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Border Style</label>
                        <select id="border-style" class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="none">No Border</option>
                            <option value="solid" selected>Solid</option>
                            <option value="dashed">Dashed</option>
                            <option value="dotted">Dotted</option>
                            <option value="double">Double</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Border Width</label>
                        <div class="flex items-center space-x-3">
                            <input type="range" id="border-width" min="0" max="20" value="2" 
                                   class="flex-1">
                            <span id="border-width-value" class="text-sm font-medium text-gray-700 w-16">2px</span>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Corner Radius</label>
                        <div class="flex items-center space-x-3">
                            <input type="range" id="border-radius" min="0" max="50" value="8" 
                                   class="flex-1">
                            <span id="border-radius-value" class="text-sm font-medium text-gray-700 w-16">8px</span>
                        </div>
                    </div>

                    <div>
                        <label class="flex items-center space-x-2">
                            <input type="checkbox" id="add-shadow" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="text-sm font-medium text-gray-700">Add Shadow Effect</span>
                        </label>
                    </div>

                    <div>
                        <label class="flex items-center space-x-2">
                            <input type="checkbox" id="add-gradient" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="text-sm font-medium text-gray-700">Gradient Background</span>
                        </label>
                    </div>
                </div>
            </div>

            <!-- Save Actions -->
            <div class="bg-white shadow rounded-lg p-6">
                <div class="space-y-3">
                    <button type="button" id="save-template" 
                            class="w-full px-4 py-3 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                        <span class="flex items-center justify-center">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
                            </svg>
                            Save Template
                        </span>
                    </button>
                    
                    <button type="button" id="preview-fullscreen" 
                            class="w-full px-4 py-3 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:ring-2 focus:ring-gray-500">
                        <span class="flex items-center justify-center">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"/>
                            </svg>
                            Full Screen Preview
                        </span>
                    </button>

                    <button type="button" id="reset-defaults" 
                            class="w-full px-4 py-3 text-sm font-medium text-red-600 bg-red-50 rounded-md hover:bg-red-100 focus:ring-2 focus:ring-red-500">
                        <span class="flex items-center justify-center">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                            </svg>
                            Reset to Defaults
                        </span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Live Preview Panel -->
        <div class="xl:col-span-2">
            <div class="bg-white shadow rounded-lg p-6 sticky top-6">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-semibold text-gray-900">Live Preview</h2>
                    <div class="flex space-x-2">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            <span class="w-2 h-2 bg-green-400 rounded-full mr-1"></span>
                            Live
                        </span>
                        <select id="preview-size" class="text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                            <option value="1.0">100%</option>
                            <option value="0.8" selected>80%</option>
                            <option value="0.6">60%</option>
                            <option value="0.4">40%</option>
                        </select>
                    </div>
                </div>
                
                <div id="template-preview-container" class="flex justify-center">
                    <div id="template-preview" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center bg-gray-50" style="width: 800px; height: 600px; transform: scale(0.8); transform-origin: top;">
                        <div class="flex items-center justify-center h-full text-gray-500">
                            <div class="text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                                </svg>
                                <p class="mt-2 text-sm">Select a template to see live preview</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-4 text-sm text-gray-600 bg-gray-50 p-4 rounded-lg">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p><strong>Preview Data:</strong></p>
                            <p>Name: John Doe</p>
                            <p>Course: Advanced Web Development</p>
                        </div>
                        <div>
                            <p>Date: <%= new Date().toLocaleDateString() %></p>
                            <p>Certificate ID: CERT-001</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Full Screen Preview Modal -->
<div id="fullscreen-modal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
    <div class="relative max-w-6xl w-full mx-4">
        <button id="close-fullscreen" class="absolute top-4 right-4 text-white hover:text-gray-300 z-10">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
        <div id="fullscreen-preview" class="bg-white rounded-lg overflow-hidden">
            <!-- Full size preview will be rendered here -->
        </div>
    </div>
</div>

<script>
let currentTemplate = null;
let currentConfig = {
    primaryColor: '#2563eb',
    backgroundColor: '#ffffff',
    fontColor: '#000000',
    borderColor: '#d1d5db',
    fontFamily: 'Arial',
    titleFontSize: 48,
    nameFontSize: 36,
    courseFontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    textX: 400,
    textY: 300,
    lineSpacing: 1.5,
    padding: 40,
    logoSize: 100,
    logoPosition: 'top',
    organizationName: '',
    borderStyle: 'solid',
    borderWidth: 2,
    borderRadius: 8,
    addShadow: false,
    addGradient: false
};

document.addEventListener('DOMContentLoaded', function() {
    initializeCustomizer();
    loadDefaultTemplates();
    setupEventListeners();
    
    // Check URL params
    const urlParams = new URLSearchParams(window.location.search);
    const templateId = urlParams.get('id');
    if (templateId) {
        setTimeout(() => {
            document.getElementById('template-select').value = templateId;
            handleTemplateChange();
        }, 1000);
    }
});

function initializeCustomizer() {
    // Set initial values from config
    document.getElementById('primary-color').value = currentConfig.primaryColor;
    document.getElementById('primary-color-hex').value = currentConfig.primaryColor;
    document.getElementById('background-color').value = currentConfig.backgroundColor;
    document.getElementById('background-color-hex').value = currentConfig.backgroundColor;
    document.getElementById('font-color').value = currentConfig.fontColor;
    document.getElementById('font-color-hex').value = currentConfig.fontColor;
    document.getElementById('border-color').value = currentConfig.borderColor;
    document.getElementById('border-color-hex').value = currentConfig.borderColor;
    
    document.getElementById('font-family').value = currentConfig.fontFamily;
    document.getElementById('title-font-size').value = currentConfig.titleFontSize;
    document.getElementById('name-font-size').value = currentConfig.nameFontSize;
    document.getElementById('course-font-size').value = currentConfig.courseFontSize;
    document.getElementById('font-weight').value = currentConfig.fontWeight;
    
    document.getElementById('text-x').value = currentConfig.textX;
    document.getElementById('text-y').value = currentConfig.textY;
    document.getElementById('line-spacing').value = currentConfig.lineSpacing;
    document.getElementById('padding').value = currentConfig.padding;
    
    document.getElementById('logo-size').value = currentConfig.logoSize;
    document.getElementById('logo-position').value = currentConfig.logoPosition;
    
    document.getElementById('border-style').value = currentConfig.borderStyle;
    document.getElementById('border-width').value = currentConfig.borderWidth;
    document.getElementById('border-radius').value = currentConfig.borderRadius;
    
    // Update display values
    updateSliderDisplays();
}

function setupEventListeners() {
    // Color pickers and hex inputs sync
    setupColorSync('primary-color', 'primary-color-hex', 'primaryColor');
    setupColorSync('background-color', 'background-color-hex', 'backgroundColor');
    setupColorSync('font-color', 'font-color-hex', 'fontColor');
    setupColorSync('border-color', 'border-color-hex', 'borderColor');
    
    // Font and layout controls
    setupInputListener('font-family', 'fontFamily');
    setupInputListener('font-weight', 'fontWeight');
    setupInputListener('text-x', 'textX', 'number');
    setupInputListener('text-y', 'textY', 'number');
    setupInputListener('organization-name', 'organizationName');
    setupInputListener('logo-position', 'logoPosition');
    setupInputListener('border-style', 'borderStyle');
    
    // Sliders
    setupSliderListener('title-font-size', 'title-font-size-value', 'titleFontSize', 'px');
    setupSliderListener('name-font-size', 'name-font-size-value', 'nameFontSize', 'px');
    setupSliderListener('course-font-size', 'course-font-size-value', 'courseFontSize', 'px');
    setupSliderListener('line-spacing', 'line-spacing-value', 'lineSpacing', '');
    setupSliderListener('padding', 'padding-value', 'padding', 'px');
    setupSliderListener('logo-size', 'logo-size-value', 'logoSize', 'px');
    setupSliderListener('border-width', 'border-width-value', 'borderWidth', 'px');
    setupSliderListener('border-radius', 'border-radius-value', 'borderRadius', 'px');
    
    // Checkboxes
    setupCheckboxListener('add-shadow', 'addShadow');
    setupCheckboxListener('add-gradient', 'addGradient');
    
    // Text alignment buttons
    document.getElementById('align-left').addEventListener('click', () => setTextAlign('left'));
    document.getElementById('align-center').addEventListener('click', () => setTextAlign('center'));
    document.getElementById('align-right').addEventListener('click', () => setTextAlign('right'));
    
    // Template selection
    document.getElementById('template-select').addEventListener('change', handleTemplateChange);
    
    // Preview size
    document.getElementById('preview-size').addEventListener('change', function() {
        const scale = parseFloat(this.value);
        const preview = document.getElementById('template-preview');
        preview.style.transform = `scale(${scale})`;
    });
    
    // Logo upload
    document.getElementById('logo-upload').addEventListener('change', handleLogoUpload);
    
    // Action buttons
    document.getElementById('save-template').addEventListener('click', saveTemplate);
    document.getElementById('preview-fullscreen').addEventListener('click', showFullscreenPreview);
    document.getElementById('reset-defaults').addEventListener('click', resetToDefaults);
    document.getElementById('close-fullscreen').addEventListener('click', closeFullscreenPreview);
}

function setupColorSync(colorId, hexId, configKey) {
    const colorInput = document.getElementById(colorId);
    const hexInput = document.getElementById(hexId);
    
    colorInput.addEventListener('change', function() {
        hexInput.value = this.value;
        currentConfig[configKey] = this.value;
        updatePreview();
    });
    
    hexInput.addEventListener('change', function() {
        if (/^#[0-9A-Fa-f]{6}$/.test(this.value)) {
            colorInput.value = this.value;
            currentConfig[configKey] = this.value;
            updatePreview();
        }
    });
}

function setupInputListener(inputId, configKey, type = 'string') {
    document.getElementById(inputId).addEventListener('change', function() {
        currentConfig[configKey] = type === 'number' ? Number(this.value) : this.value;
        updatePreview();
    });
}

function setupSliderListener(sliderId, displayId, configKey, unit) {
    document.getElementById(sliderId).addEventListener('input', function() {
        const value = Number(this.value);
        document.getElementById(displayId).textContent = value + unit;
        currentConfig[configKey] = value;
        updatePreview();
    });
}

function setupCheckboxListener(checkboxId, configKey) {
    document.getElementById(checkboxId).addEventListener('change', function() {
        currentConfig[configKey] = this.checked;
        updatePreview();
    });
}

function setTextAlign(align) {
    currentConfig.textAlign = align;
    
    // Update button states
    document.getElementById('align-left').classList.remove('bg-blue-50', 'border-blue-300');
    document.getElementById('align-center').classList.remove('bg-blue-50', 'border-blue-300');
    document.getElementById('align-right').classList.remove('bg-blue-50', 'border-blue-300');
    
    document.getElementById(`align-${align}`).classList.add('bg-blue-50', 'border-blue-300');
    
    updatePreview();
}

function updateSliderDisplays() {
    document.getElementById('title-font-size-value').textContent = currentConfig.titleFontSize + 'px';
    document.getElementById('name-font-size-value').textContent = currentConfig.nameFontSize + 'px';
    document.getElementById('course-font-size-value').textContent = currentConfig.courseFontSize + 'px';
    document.getElementById('line-spacing-value').textContent = currentConfig.lineSpacing;
    document.getElementById('padding-value').textContent = currentConfig.padding + 'px';
    document.getElementById('logo-size-value').textContent = currentConfig.logoSize + 'px';
    document.getElementById('border-width-value').textContent = currentConfig.borderWidth + 'px';
    document.getElementById('border-radius-value').textContent = currentConfig.borderRadius + 'px';
}

async function loadDefaultTemplates() {
    try {
        const token = localStorage.getItem('auth_token');
        const response = await fetch('/api/templates/defaults', {
            headers: token ? { 'Authorization': `Bearer ${token}` } : {}
        });
        
        const data = await response.json();
        
        if (data.success) {
            const select = document.getElementById('template-select');
            select.innerHTML = '<option value="">Choose a base template</option>' + 
                data.data.map(template => 
                    `<option value="${template.id}">${template.name}</option>`
                ).join('');
        }
    } catch (error) {
        console.error('Error loading templates:', error);
        showError('Failed to load templates');
    }
}

function handleTemplateChange() {
    const templateId = document.getElementById('template-select').value;
    if (!templateId) {
        currentTemplate = null;
        updatePreview();
        return;
    }
    
    // In a real implementation, you would fetch the template details
    currentTemplate = { id: templateId, name: 'Selected Template' };
    updatePreview();
}

function updatePreview() {
    const preview = document.getElementById('template-preview');
    
    if (!currentTemplate) {
        preview.innerHTML = `
            <div class="flex items-center justify-center h-full text-gray-500">
                <div class="text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                    </svg>
                    <p class="mt-2 text-sm">Select a template to see live preview</p>
                </div>
            </div>
        `;
        return;
    }
    
    const gradientStyle = currentConfig.addGradient ? 
        `background: linear-gradient(135deg, ${currentConfig.primaryColor}20, ${currentConfig.backgroundColor});` :
        `background-color: ${currentConfig.backgroundColor};`;
    
    const shadowStyle = currentConfig.addShadow ? 
        'box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);' : '';
    
    const borderStyle = currentConfig.borderStyle !== 'none' ? 
        `border: ${currentConfig.borderWidth}px ${currentConfig.borderStyle} ${currentConfig.borderColor};` : '';
    
    preview.innerHTML = `
        <div class="h-full flex flex-col justify-center" style="
            ${gradientStyle}
            ${shadowStyle}
            ${borderStyle}
            border-radius: ${currentConfig.borderRadius}px;
            padding: ${currentConfig.padding}px;
            font-family: ${currentConfig.fontFamily};
            text-align: ${currentConfig.textAlign};
            line-height: ${currentConfig.lineSpacing};
        ">
            ${currentConfig.logoPosition === 'top' && currentConfig.organizationName ? 
                `<div style="margin-bottom: 20px;">
                    <div style="width: ${currentConfig.logoSize}px; height: ${currentConfig.logoSize/2}px; background: ${currentConfig.primaryColor}; margin: 0 auto; border-radius: 4px; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px;">LOGO</div>
                </div>` : ''
            }
            
            <div style="flex: 1; display: flex; flex-direction: column; justify-content: center;">
                <h1 style="
                    font-size: ${currentConfig.titleFontSize}px;
                    font-weight: ${currentConfig.fontWeight};
                    color: ${currentConfig.fontColor};
                    margin: 0 0 20px 0;
                ">Certificate of Achievement</h1>
                
                <p style="
                    font-size: ${currentConfig.courseFontSize}px;
                    color: ${currentConfig.fontColor};
                    margin: 10px 0;
                    opacity: 0.8;
                ">This certifies that</p>
                
                <h2 style="
                    font-size: ${currentConfig.nameFontSize}px;
                    font-weight: ${currentConfig.fontWeight};
                    color: ${currentConfig.primaryColor};
                    margin: 20px 0;
                ">John Doe</h2>
                
                <p style="
                    font-size: ${currentConfig.courseFontSize}px;
                    color: ${currentConfig.fontColor};
                    margin: 10px 0;
                    opacity: 0.8;
                ">has successfully completed</p>
                
                <h3 style="
                    font-size: ${currentConfig.courseFontSize + 4}px;
                    font-weight: ${currentConfig.fontWeight};
                    color: ${currentConfig.fontColor};
                    margin: 20px 0;
                ">Advanced Web Development</h3>
                
                <p style="
                    font-size: ${currentConfig.courseFontSize - 4}px;
                    color: ${currentConfig.fontColor};
                    margin: 20px 0 0 0;
                    opacity: 0.7;
                ">${new Date().toLocaleDateString()}</p>
            </div>
            
            ${currentConfig.logoPosition === 'bottom' && currentConfig.organizationName ? 
                `<div style="margin-top: 20px;">
                    <p style="font-size: ${currentConfig.courseFontSize - 6}px; color: ${currentConfig.fontColor}; margin-bottom: 10px;">${currentConfig.organizationName}</p>
                    <div style="width: ${currentConfig.logoSize}px; height: ${currentConfig.logoSize/2}px; background: ${currentConfig.primaryColor}; margin: 0 auto; border-radius: 4px; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px;">LOGO</div>
                </div>` : ''
            }
        </div>
    `;
}

function handleLogoUpload(event) {
    const file = event.target.files[0];
    if (file) {
        if (file.size > 2 * 1024 * 1024) {
            showError('Logo file size must be less than 2MB');
            event.target.value = '';
            return;
        }
        
        const reader = new FileReader();
        reader.onload = function(e) {
            // Store the logo data for later use
            currentConfig.logoData = e.target.result;
            updatePreview();
        };
        reader.readAsDataURL(file);
    }
}

async function saveTemplate() {
    const templateId = document.getElementById('template-select').value;
    if (!templateId) {
        showError('Please select a base template first');
        return;
    }
    
    const saveButton = document.getElementById('save-template');
    saveButton.disabled = true;
    saveButton.innerHTML = `
        <span class="flex items-center justify-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Saving...
        </span>
    `;
    
    try {
        const token = localStorage.getItem('auth_token');
        if (!token) {
            showError('Please log in to save templates');
            return;
        }
        
        const formData = new FormData();
        formData.append('baseTemplateId', templateId);
        formData.append('primary_color', currentConfig.primaryColor);
        formData.append('font_color', currentConfig.fontColor);
        formData.append('font_family', currentConfig.fontFamily);
        formData.append('font_size', currentConfig.titleFontSize.toString());
        formData.append('text_x_position', currentConfig.textX.toString());
        formData.append('text_y_position', currentConfig.textY.toString());
        
        // Add logo if uploaded
        const logoFile = document.getElementById('logo-upload').files[0];
        if (logoFile) {
            formData.append('logo', logoFile);
        }
        
        const response = await fetch('/api/templates/customize/default', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Template saved successfully!');
            setTimeout(() => {
                window.location.href = '/templates/select';
            }, 1500);
        } else {
            showError(data.message || 'Failed to save template');
        }
    } catch (error) {
        console.error('Save error:', error);
        showError('Failed to save template. Please try again.');
    } finally {
        saveButton.disabled = false;
        saveButton.innerHTML = `
            <span class="flex items-center justify-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
                </svg>
                Save Template
            </span>
        `;
    }
}

function showFullscreenPreview() {
    const modal = document.getElementById('fullscreen-modal');
    const fullscreenPreview = document.getElementById('fullscreen-preview');
    
    // Clone the current preview but make it full size
    const currentPreviewContent = document.getElementById('template-preview').innerHTML;
    fullscreenPreview.innerHTML = `
        <div style="width: 1200px; height: 900px; transform: scale(1);">
            ${currentPreviewContent}
        </div>
    `;
    
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

function closeFullscreenPreview() {
    const modal = document.getElementById('fullscreen-modal');
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
}

function resetToDefaults() {
    if (confirm('Are you sure you want to reset all customizations to default values?')) {
        // Reset config to defaults
        currentConfig = {
            primaryColor: '#2563eb',
            backgroundColor: '#ffffff',
            fontColor: '#000000',
            borderColor: '#d1d5db',
            fontFamily: 'Arial',
            titleFontSize: 48,
            nameFontSize: 36,
            courseFontSize: 24,
            fontWeight: 'bold',
            textAlign: 'center',
            textX: 400,
            textY: 300,
            lineSpacing: 1.5,
            padding: 40,
            logoSize: 100,
            logoPosition: 'top',
            organizationName: '',
            borderStyle: 'solid',
            borderWidth: 2,
            borderRadius: 8,
            addShadow: false,
            addGradient: false
        };
        
        // Reset form inputs
        initializeCustomizer();
        
        // Clear logo upload
        document.getElementById('logo-upload').value = '';
        
        // Update preview
        updatePreview();
        
        showSuccess('Settings reset to defaults');
    }
}

function showError(message) {
    // Create a toast notification for errors
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300';
    toast.innerHTML = `
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            ${message}
        </div>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => toast.classList.remove('translate-x-full'), 100);
    setTimeout(() => {
        toast.classList.add('translate-x-full');
        setTimeout(() => document.body.removeChild(toast), 300);
    }, 4000);
}

function showSuccess(message) {
    // Create a toast notification for success
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300';
    toast.innerHTML = `
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            ${message}
        </div>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => toast.classList.remove('translate-x-full'), 100);
    setTimeout(() => {
        toast.classList.add('translate-x-full');
        setTimeout(() => document.body.removeChild(toast), 300);
    }, 3000);
}

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
    if (e.ctrlKey || e.metaKey) {
        if (e.key === 's') {
            e.preventDefault();
            saveTemplate();
        } else if (e.key === 'r') {
            e.preventDefault();
            resetToDefaults();
        }
    }
    
    if (e.key === 'Escape') {
        closeFullscreenPreview();
    }
});
</script>
