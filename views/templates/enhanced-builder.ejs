<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://unpkg.com/htmx.org@1.9.6"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .gradient-bg {
            background: linear-gradient(to bottom right, #f8fafc, #e2e8f0);
        }
        
        .certificate-preview {
            transform-origin: top center;
            transition: transform 0.3s ease;
        }
        
        .color-picker-wrapper {
            position: relative;
        }
        
        .color-picker {
            appearance: none;
            border: none;
            cursor: pointer;
            border-radius: 0.5rem;
        }
        
        .color-picker::-webkit-color-swatch {
            border-radius: 0.375rem;
            border: 2px solid #e5e7eb;
        }
        
        .sidebar {
            max-height: 100vh;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #cbd5e0 #f7fafc;
        }
        
        .sidebar::-webkit-scrollbar {
            width: 6px;
        }
        
        .sidebar::-webkit-scrollbar-track {
            background: #f7fafc;
        }
        
        .sidebar::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 3px;
        }
        
        .preview-container {
            background: repeating-linear-gradient(
                45deg,
                #f8fafc,
                #f8fafc 10px,
                #f1f5f9 10px,
                #f1f5f9 20px
            );
        }
        
        .theme-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .icon-button {
            transition: all 0.2s ease;
        }
        
        .icon-button:hover {
            transform: scale(1.05);
        }
        
        .icon-button.selected {
            background: #0891b2;
            border-color: #0891b2;
            color: white;
        }
        
        .loading-spinner {
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .toast {
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        
        .toast.show {
            transform: translateX(0);
        }
        
        .logo-preview {
            border: 2px dashed #d1d5db;
            border-radius: 0.5rem;
            min-height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f9fafb;
        }
        
        .logo-preview.has-image {
            border: 2px solid #10b981;
            background: white;
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <div class="max-w-7xl mx-auto p-6">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-slate-800 mb-2">Certificate Builder</h1>
            <p class="text-slate-600">Design and customize professional certificates with live preview</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Customization Sidebar -->
            <div class="lg:col-span-1 space-y-4 sidebar">
                
                <!-- Templates Section -->
                <div class="bg-white rounded-xl shadow-md p-6">
                    <div class="flex items-center gap-2 mb-4">
                        <svg class="w-5 h-5 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-9a2 2 0 00-2-2h-2a2 2 0 01-2-2V5a2 2 0 00-2-2H9a2 2 0 00-2 2v0a2 2 0 01-2 2H3a2 2 0 00-2 2v9a4 4 0 004 4z"/>
                        </svg>
                        <h3 class="font-semibold text-slate-800">Templates</h3>
                    </div>
                    <div class="grid grid-cols-2 gap-2">
                        <% templatePresets.forEach(template => { %>
                        <button type="button" 
                                data-template="<%= template.id %>"
                                class="theme-button p-3 rounded-lg text-xs font-medium transition-all border-2 hover:border-cyan-500 focus:ring-2 focus:ring-cyan-500"
                                style="background: linear-gradient(135deg, <%= template.config.primaryColor %>20, <%= template.config.secondaryColor %>20)"
                                hx-post="/api/templates/builder/apply-preset"
                                hx-vals='{"presetId": "<%= template.id %>", "category": "theme"}'
                                hx-trigger="click"
                                hx-target="#config-feedback">
                            <%= template.name %>
                        </button>
                        <% }); %>
                    </div>
                </div>

                <!-- Logo Section -->
                <div class="bg-white rounded-xl shadow-md p-6">
                    <div class="flex items-center gap-2 mb-4">
                        <svg class="w-5 h-5 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                        <h3 class="font-semibold text-slate-800">Logo</h3>
                    </div>
                    
                    <div class="space-y-4">
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="show-logo" class="w-4 h-4 text-cyan-600 rounded" checked>
                            <label for="show-logo" class="text-sm font-medium text-slate-700">Show Logo</label>
                        </div>
                        
                        <div id="logo-section">
                            <div class="space-y-3">
                                <div>
                                    <label class="text-sm font-medium text-slate-700 block mb-2">Upload Logo</label>
                                    <div class="logo-preview" id="logo-preview">
                                        <div class="text-center">
                                            <svg class="w-8 h-8 mx-auto mb-2 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                                            </svg>
                                            <p class="text-xs text-slate-600">Click to upload</p>
                                            <p class="text-xs text-slate-400">PNG, JPG, SVG</p>
                                        </div>
                                        <input type="file" 
                                               id="logo-upload" 
                                               accept="image/*" 
                                               class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                                               hx-post="/api/templates/builder/upload-logo"
                                               hx-encoding="multipart/form-data"
                                               hx-target="#logo-feedback">
                                    </div>
                                    <div id="logo-feedback"></div>
                                </div>
                                
                                <div>
                                    <label class="text-sm font-medium text-slate-700 block mb-1">Logo Text</label>
                                    <input type="text" 
                                           id="logo-text" 
                                           value="<%= defaultConfig.logoText %>"
                                           class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500"
                                           placeholder="Company Name">
                                </div>
                                
                                <div class="grid grid-cols-2 gap-3">
                                    <div>
                                        <label class="text-sm font-medium text-slate-700 block mb-1">Size</label>
                                        <select id="logo-size" class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                            <option value="small">Small</option>
                                            <option value="medium" selected>Medium</option>
                                            <option value="large">Large</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label class="text-sm font-medium text-slate-700 block mb-1">Position</label>
                                        <select id="logo-position" class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                            <option value="top-left" selected>Top Left</option>
                                            <option value="top-center">Top Center</option>
                                            <option value="top-right">Top Right</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Content Section -->
                <div class="bg-white rounded-xl shadow-md p-6">
                    <div class="flex items-center gap-2 mb-4">
                        <svg class="w-5 h-5 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                        </svg>
                        <h3 class="font-semibold text-slate-800">Content</h3>
                    </div>
                    
                    <div class="space-y-4">
                        <div>
                            <label class="text-sm font-medium text-slate-700 block mb-1">Title</label>
                            <input type="text" 
                                   id="certificate-title" 
                                   value="<%= defaultConfig.title %>"
                                   class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                        </div>
                        
                        <div>
                            <label class="text-sm font-medium text-slate-700 block mb-1">Subtitle</label>
                            <input type="text" 
                                   id="certificate-subtitle" 
                                   value="<%= defaultConfig.subtitle %>"
                                   class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                        </div>
                        
                        <div>
                            <label class="text-sm font-medium text-slate-700 block mb-1">Recipient Name</label>
                            <input type="text" 
                                   id="recipient-name" 
                                   value="<%= defaultConfig.recipientName %>"
                                   class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                        </div>
                        
                        <div>
                            <label class="text-sm font-medium text-slate-700 block mb-1">Description</label>
                            <textarea id="certificate-description" 
                                      rows="3"
                                      class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500"><%= defaultConfig.description %></textarea>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-3">
                            <div>
                                <label class="text-sm font-medium text-slate-700 block mb-1">Date</label>
                                <input type="text" 
                                       id="certificate-date" 
                                       value="<%= defaultConfig.date %>"
                                       class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                            </div>
                            <div>
                                <label class="text-sm font-medium text-slate-700 block mb-1">Signature</label>
                                <input type="text" 
                                       id="certificate-signature" 
                                       value="<%= defaultConfig.signature %>"
                                       class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Badge Section -->
                <div class="bg-white rounded-xl shadow-md p-6">
                    <div class="flex items-center gap-2 mb-4">
                        <svg class="w-5 h-5 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"/>
                        </svg>
                        <h3 class="font-semibold text-slate-800">Badge</h3>
                    </div>
                    
                    <div class="space-y-4">
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="show-badge" class="w-4 h-4 text-cyan-600 rounded" checked>
                            <label for="show-badge" class="text-sm font-medium text-slate-700">Show Award Badge</label>
                        </div>
                        
                        <div id="badge-section">
                            <div class="space-y-3">
                                <div>
                                    <label class="text-sm font-medium text-slate-700 block mb-2">Badge Icon</label>
                                    <div class="grid grid-cols-3 gap-2">
                                        <% Object.entries(badgeIcons).forEach(([key, icon]) => { %>
                                        <button type="button" 
                                                data-icon="<%= key %>"
                                                class="icon-button p-3 rounded-lg border-2 border-slate-200 hover:border-slate-300 focus:ring-2 focus:ring-cyan-500 transition-all flex flex-col items-center gap-1 <%= key === 'award' ? 'selected' : '' %>"
                                                title="<%= icon.label %>">
                                            <span class="text-lg">
                                                <% if (key === 'award') { %>🏆
                                                <% } else if (key === 'star') { %>⭐
                                                <% } else if (key === 'shield') { %>🛡️
                                                <% } else if (key === 'trophy') { %>🏆
                                                <% } else if (key === 'medal') { %>🥇
                                                <% } else if (key === 'crown') { %>👑
                                                <% } else if (key === 'sparkles') { %>✨
                                                <% } else if (key === 'check-circle') { %>✅
                                                <% } else if (key === 'hexagon') { %>⬡
                                                <% } else { %>🏆
                                                <% } %>
                                            </span>
                                            <span class="text-xs"><%= icon.label %></span>
                                        </button>
                                        <% }); %>
                                    </div>
                                </div>
                                
                                <div>
                                    <label class="text-sm font-medium text-slate-700 block mb-1">Badge Text</label>
                                    <input type="text" 
                                           id="badge-text" 
                                           value="<%= defaultConfig.badgeText %>"
                                           class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Colors Section -->
                <div class="bg-white rounded-xl shadow-md p-6">
                    <div class="flex items-center gap-2 mb-4">
                        <svg class="w-5 h-5 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-9a2 2 0 00-2-2h-2a2 2 0 01-2-2V5a2 2 0 00-2-2H9a2 2 0 00-2 2v0a2 2 0 01-2 2H3a2 2 0 00-2 2v9a4 4 0 004 4z"/>
                        </svg>
                        <h3 class="font-semibold text-slate-800">Colors & Style</h3>
                    </div>
                    
                    <div class="space-y-4">
                        <!-- Color Presets -->
                        <div>
                            <label class="text-sm font-medium text-slate-700 block mb-2">Color Presets</label>
                            <div class="grid grid-cols-4 gap-2">
                                <% colorPresets.forEach(preset => { %>
                                <button type="button" 
                                        data-preset="<%= preset.id %>"
                                        class="h-8 rounded border-2 border-gray-300 hover:border-gray-400 focus:ring-2 focus:ring-cyan-500 transition-all"
                                        style="background: linear-gradient(45deg, <%= preset.config.primaryColor %>, <%= preset.config.secondaryColor %>)"
                                        title="<%= preset.name %>"
                                        hx-post="/api/templates/builder/apply-preset"
                                        hx-vals='{"presetId": "<%= preset.id %>", "category": "color"}'
                                        hx-trigger="click"
                                        hx-target="#config-feedback">
                                </button>
                                <% }); %>
                            </div>
                        </div>
                        
                        <!-- Individual Color Controls -->
                        <div class="grid grid-cols-1 gap-3">
                            <div>
                                <label class="text-sm font-medium text-slate-700 block mb-1">Primary Color</label>
                                <div class="flex items-center gap-3">
                                    <input type="color" 
                                           id="primary-color" 
                                           value="<%= defaultConfig.primaryColor %>"
                                           class="color-picker h-10 w-16 border border-slate-300 rounded-lg cursor-pointer">
                                    <input type="text" 
                                           id="primary-color-hex" 
                                           value="<%= defaultConfig.primaryColor %>"
                                           class="flex-1 px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                </div>
                            </div>
                            
                            <div>
                                <label class="text-sm font-medium text-slate-700 block mb-1">Secondary Color</label>
                                <div class="flex items-center gap-3">
                                    <input type="color" 
                                           id="secondary-color" 
                                           value="<%= defaultConfig.secondaryColor %>"
                                           class="color-picker h-10 w-16 border border-slate-300 rounded-lg cursor-pointer">
                                    <input type="text" 
                                           id="secondary-color-hex" 
                                           value="<%= defaultConfig.secondaryColor %>"
                                           class="flex-1 px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                </div>
                            </div>
                            
                            <div>
                                <label class="text-sm font-medium text-slate-700 block mb-1">Text Color</label>
                                <div class="flex items-center gap-3">
                                    <input type="color" 
                                           id="accent-color" 
                                           value="<%= defaultConfig.accentColor %>"
                                           class="color-picker h-10 w-16 border border-slate-300 rounded-lg cursor-pointer">
                                    <input type="text" 
                                           id="accent-color-hex" 
                                           value="<%= defaultConfig.accentColor %>"
                                           class="flex-1 px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label class="text-sm font-medium text-slate-700 block mb-1">Font Style</label>
                            <select id="font-family" class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                <option value="serif" <%= defaultConfig.fontFamily === 'serif' ? 'selected' : '' %>>Serif (Elegant)</option>
                                <option value="sans" <%= defaultConfig.fontFamily === 'sans' ? 'selected' : '' %>>Sans-serif (Modern)</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="text-sm font-medium text-slate-700 block mb-1">Border Style</label>
                            <select id="border-style" class="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-500">
                                <option value="modern" selected>Modern</option>
                                <option value="ornate">Ornate</option>
                                <option value="minimal">Minimal</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="bg-white rounded-xl shadow-md p-6">
                    <div class="space-y-3">
                        <button type="button" 
                                id="save-template"
                                class="w-full px-4 py-3 text-sm font-medium text-white bg-cyan-600 rounded-lg hover:bg-cyan-700 focus:ring-2 focus:ring-cyan-500 transition-colors flex items-center justify-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
                            </svg>
                            Save Template
                        </button>
                        
                        <button type="button" 
                                id="download-certificate"
                                class="w-full px-4 py-3 text-sm font-medium text-cyan-700 bg-cyan-50 rounded-lg hover:bg-cyan-100 focus:ring-2 focus:ring-cyan-500 transition-colors flex items-center justify-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                            </svg>
                            Download Certificate
                        </button>
                        
                        <button type="button" 
                                id="reset-defaults"
                                class="w-full px-4 py-3 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 focus:ring-2 focus:ring-red-500 transition-colors flex items-center justify-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                            </svg>
                            Reset to Defaults
                        </button>
                    </div>
                </div>
            </div>

            <!-- Live Preview Panel -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-xl shadow-md p-6 sticky top-6">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-slate-800">Live Preview</h2>
                        <div class="flex items-center gap-4">
                            <div class="flex items-center gap-2">
                                <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                                <span class="text-sm font-medium text-green-800">Live</span>
                            </div>
                            <select id="preview-scale" class="text-sm border-slate-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500">
                                <option value="1.0">100%</option>
                                <option value="0.8" selected>80%</option>
                                <option value="0.6">60%</option>
                                <option value="0.4">40%</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="preview-container rounded-lg p-8 min-h-[600px] flex items-center justify-center">
                        <div id="certificate-preview" 
                             class="certificate-preview"
                             hx-post="/api/templates/builder/preview"
                             hx-trigger="load, change from:body delay:500ms"
                             hx-include="[id^='certificate-'], [id^='logo-'], [id^='badge-'], [id^='primary-'], [id^='secondary-'], [id^='accent-'], [id^='font-'], [id^='border-'], [id^='recipient-'], [id^='show-']"
                             hx-target="this"
                             hx-swap="innerHTML">
                            <!-- Initial certificate preview will be loaded here -->
                            <div class="flex items-center justify-center h-96 text-slate-500">
                                <div class="text-center">
                                    <div class="loading-spinner w-8 h-8 border-4 border-slate-300 border-t-cyan-600 rounded-full mx-auto mb-4"></div>
                                    <p class="text-sm">Loading preview...</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4 text-sm text-slate-600 bg-slate-50 p-4 rounded-lg">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <p><strong>Preview Data:</strong></p>
                                <p>Name: <span id="preview-name"><%= defaultConfig.recipientName %></span></p>
                                <p>Title: <span id="preview-title"><%= defaultConfig.title %></span></p>
                            </div>
                            <div>
                                <p>Date: <span id="preview-date"><%= defaultConfig.date %></span></p>
                                <p>Signature: <span id="preview-signature"><%= defaultConfig.signature %></span></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast notifications -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2">
        <!-- Toasts will be dynamically added here -->
    </div>

    <!-- Hidden feedback elements for HTMX -->
    <div id="config-feedback" style="display: none;"></div>

    <script>
        // Certificate builder JavaScript
        let currentConfig = {
            template: '<%= defaultConfig.template %>',
            recipientName: '<%= defaultConfig.recipientName %>',
            title: '<%= defaultConfig.title %>',
            subtitle: '<%= defaultConfig.subtitle %>',
            description: '<%= defaultConfig.description %>',
            date: '<%= defaultConfig.date %>',
            signature: '<%= defaultConfig.signature %>',
            primaryColor: '<%= defaultConfig.primaryColor %>',
            secondaryColor: '<%= defaultConfig.secondaryColor %>',
            accentColor: '<%= defaultConfig.accentColor %>',
            fontFamily: '<%= defaultConfig.fontFamily %>',
            showBadge: <%= defaultConfig.showBadge %>,
            badgeText: '<%= defaultConfig.badgeText %>',
            badgeIcon: '<%= defaultConfig.badgeIcon %>',
            borderStyle: '<%= defaultConfig.borderStyle %>',
            logoText: '<%= defaultConfig.logoText %>',
            showLogo: <%= defaultConfig.showLogo %>,
            logoPosition: '<%= defaultConfig.logoPosition %>',
            logoSize: '<%= defaultConfig.logoSize %>'
        };

        // Initialize the certificate builder
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            updatePreview();
        });

        function setupEventListeners() {
            // Color picker synchronization
            syncColorInputs('primary-color', 'primary-color-hex');
            syncColorInputs('secondary-color', 'secondary-color-hex');
            syncColorInputs('accent-color', 'accent-color-hex');

            // Preview scale control
            document.getElementById('preview-scale').addEventListener('change', function() {
                const scale = parseFloat(this.value);
                const preview = document.getElementById('certificate-preview');
                preview.style.transform = `scale(${scale})`;
            });

            // Badge icon selection
            document.querySelectorAll('[data-icon]').forEach(button => {
                button.addEventListener('click', function() {
                    // Remove selected class from all icons
                    document.querySelectorAll('[data-icon]').forEach(b => b.classList.remove('selected'));
                    // Add selected class to clicked icon
                    this.classList.add('selected');
                    currentConfig.badgeIcon = this.dataset.icon;
                    updatePreview();
                });
            });

            // Show/hide sections
            document.getElementById('show-logo').addEventListener('change', function() {
                const logoSection = document.getElementById('logo-section');
                logoSection.style.display = this.checked ? 'block' : 'none';
                currentConfig.showLogo = this.checked;
                updatePreview();
            });

            document.getElementById('show-badge').addEventListener('change', function() {
                const badgeSection = document.getElementById('badge-section');
                badgeSection.style.display = this.checked ? 'block' : 'none';
                currentConfig.showBadge = this.checked;
                updatePreview();
            });

            // Input change listeners
            ['certificate-title', 'certificate-subtitle', 'recipient-name', 'certificate-description', 
             'certificate-date', 'certificate-signature', 'logo-text', 'badge-text'].forEach(id => {
                document.getElementById(id).addEventListener('input', function() {
                    const key = id.replace('certificate-', '').replace('-', '');
                    if (key === 'recipientname') currentConfig.recipientName = this.value;
                    else if (key === 'title') currentConfig.title = this.value;
                    else if (key === 'subtitle') currentConfig.subtitle = this.value;
                    else if (key === 'description') currentConfig.description = this.value;
                    else if (key === 'date') currentConfig.date = this.value;
                    else if (key === 'signature') currentConfig.signature = this.value;
                    else if (id === 'logo-text') currentConfig.logoText = this.value;
                    else if (id === 'badge-text') currentConfig.badgeText = this.value;
                    updatePreviewData();
                });
            });

            // Select change listeners
            ['font-family', 'border-style', 'logo-size', 'logo-position'].forEach(id => {
                document.getElementById(id).addEventListener('change', function() {
                    const key = id.replace('-', '');
                    if (key === 'fontfamily') currentConfig.fontFamily = this.value;
                    else if (key === 'borderstyle') currentConfig.borderStyle = this.value;
                    else if (key === 'logosize') currentConfig.logoSize = this.value;
                    else if (key === 'logoposition') currentConfig.logoPosition = this.value;
                    updatePreview();
                });
            });

            // Action buttons
            document.getElementById('save-template').addEventListener('click', saveTemplate);
            document.getElementById('download-certificate').addEventListener('click', downloadCertificate);
            document.getElementById('reset-defaults').addEventListener('click', resetDefaults);

            // Logo upload handling
            document.getElementById('logo-upload').addEventListener('change', function(e) {
                if (e.target.files && e.target.files[0]) {
                    const file = e.target.files[0];
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        updateLogoPreview(e.target.result);
                        currentConfig.logoImage = e.target.result;
                        updatePreview();
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        function syncColorInputs(colorId, hexId) {
            const colorInput = document.getElementById(colorId);
            const hexInput = document.getElementById(hexId);
            
            colorInput.addEventListener('change', function() {
                hexInput.value = this.value;
                updateConfigColor(colorId, this.value);
                updatePreview();
            });
            
            hexInput.addEventListener('change', function() {
                if (/^#[0-9A-Fa-f]{6}$/.test(this.value)) {
                    colorInput.value = this.value;
                    updateConfigColor(colorId, this.value);
                    updatePreview();
                }
            });
        }

        function updateConfigColor(colorId, value) {
            if (colorId === 'primary-color') currentConfig.primaryColor = value;
            else if (colorId === 'secondary-color') currentConfig.secondaryColor = value;
            else if (colorId === 'accent-color') currentConfig.accentColor = value;
        }

        function updateLogoPreview(imageSrc) {
            const preview = document.getElementById('logo-preview');
            preview.innerHTML = `
                <img src="${imageSrc}" alt="Logo preview" class="max-w-full max-h-20 object-contain rounded">
                <button type="button" onclick="removeLogo()" class="absolute top-2 right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600">×</button>
            `;
            preview.classList.add('has-image');
            preview.style.position = 'relative';
        }

        function removeLogo() {
            const preview = document.getElementById('logo-preview');
            preview.innerHTML = `
                <div class="text-center">
                    <svg class="w-8 h-8 mx-auto mb-2 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                    </svg>
                    <p class="text-xs text-slate-600">Click to upload</p>
                    <p class="text-xs text-slate-400">PNG, JPG, SVG</p>
                </div>
                <input type="file" id="logo-upload" accept="image/*" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer">
            `;
            preview.classList.remove('has-image');
            preview.style.position = 'static';
            currentConfig.logoImage = null;
            updatePreview();
        }

        function updatePreview() {
            // HTMX will handle the preview update automatically
        }

        function updatePreviewData() {
            document.getElementById('preview-name').textContent = currentConfig.recipientName;
            document.getElementById('preview-title').textContent = currentConfig.title;
            document.getElementById('preview-date').textContent = currentConfig.date;
            document.getElementById('preview-signature').textContent = currentConfig.signature;
        }

        function saveTemplate() {
            // Implementation for saving template
            showToast('Template saved successfully!', 'success');
        }

        function downloadCertificate() {
            // Implementation for downloading certificate
            window.open('/api/templates/builder/generate-image', '_blank');
        }

        function resetDefaults() {
            if (confirm('Are you sure you want to reset all settings to defaults?')) {
                location.reload();
            }
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast bg-${type === 'success' ? 'green' : type === 'error' ? 'red' : 'blue'}-500 text-white px-6 py-3 rounded-lg shadow-lg flex items-center gap-2`;
            toast.innerHTML = `
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                ${message}
            `;
            
            document.getElementById('toast-container').appendChild(toast);
            
            setTimeout(() => toast.classList.add('show'), 100);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => document.getElementById('toast-container').removeChild(toast), 300);
            }, 4000);
        }

        // HTMX event listeners
        document.addEventListener('htmx:afterRequest', function(evt) {
            if (evt.detail.xhr.status >= 400) {
                showToast('An error occurred', 'error');
            }
        });

        document.addEventListener('htmx:responseError', function(evt) {
            showToast('Network error occurred', 'error');
        });
    </script>
</body>
</html>