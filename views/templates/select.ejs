<div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Select Template</h1>
                <p class="mt-2 text-sm text-gray-600">Choose a template to start creating certificates</p>
            </div>
            <a href="/dashboard" class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-4 py-2 rounded-lg transition-colors">
                ‚Üê Back to Dashboard
            </a>
        </div>
    </div>

    <!-- Templates Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="templates-grid">
        <!-- Loading state -->
        <div class="col-span-full text-center py-12">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p class="mt-2 text-gray-600">Loading templates...</p>
        </div>
    </div>

    <!-- Certificate Generation Modal -->
    <div id="cert-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg max-w-md w-full p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Generate Certificate</h3>
                    <button onclick="closeCertModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                
                <form id="cert-form" class="space-y-4">
                    <input type="hidden" id="template-id" name="templateId">
                    
                    <div>
                        <label for="recipient-name" class="block text-sm font-medium text-gray-700">Recipient Name</label>
                        <input type="text" id="recipient-name" name="recipientName" required
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div>
                        <label for="course-name" class="block text-sm font-medium text-gray-700">Course/Achievement</label>
                        <input type="text" id="course-name" name="courseName" required
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div>
                        <label for="completion-date" class="block text-sm font-medium text-gray-700">Completion Date</label>
                        <input type="date" id="completion-date" name="completionDate" required
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div class="flex justify-end space-x-3">
                        <button type="button" onclick="closeCertModal()" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200">
                            Cancel
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                            Generate Certificate
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
let selectedTemplateId = null;

// Load templates when page loads
document.addEventListener('DOMContentLoaded', function() {
    loadTemplates();
});

async function loadTemplates() {
    try {
        const token = localStorage.getItem('auth_token');
        const response = await fetch('/api/templates/defaults', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayTemplates(data.data);
        } else {
            showError('Failed to load templates');
        }
    } catch (error) {
        showError('Error loading templates');
    }
}

function displayTemplates(templates) {
    const grid = document.getElementById('templates-grid');
    
    if (templates.length === 0) {
        grid.innerHTML = `
            <div class="col-span-full text-center py-12">
                <p class="text-gray-500">No templates available</p>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = templates.map(template => `
        <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
            <div class="aspect-w-16 aspect-h-9 bg-gray-200">
                <img src="/templates/${template.id}/preview" alt="${template.name}" 
                     class="w-full h-48 object-cover" 
                     onerror="this.src='/public/images/default-templates/placeholder.png'">
            </div>
            <div class="p-4">
                <h3 class="text-lg font-medium text-gray-900 mb-2">${template.name}</h3>
                <p class="text-sm text-gray-600 mb-4">${getTemplateDescription(template.name)}</p>
                <div class="flex space-x-2">
                    <button onclick="selectTemplate('${template.id}', '${template.name}')" 
                            class="flex-1 bg-blue-600 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-blue-700">
                        Use Template
                    </button>
                    <button onclick="customizeTemplate('${template.id}')" 
                            class="bg-gray-100 text-gray-700 px-3 py-2 rounded-md text-sm font-medium hover:bg-gray-200">
                        Customize
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

function selectTemplate(templateId, templateName) {
    selectedTemplateId = templateId;
    document.getElementById('template-id').value = templateId;
    document.getElementById('cert-modal').classList.remove('hidden');
}

function customizeTemplate(templateId) {
    window.location.href = `/templates/customize?id=${templateId}`;
}

function getTemplateDescription(templateName) {
    const descriptions = {
        'Golden Winner': 'Perfect for first place winners and top achievers',
        'Silver Achievement': 'Ideal for runners-up and outstanding performers',
        'Bronze Participation': 'Great for participation and completion recognition',
        'Academic Excellence': 'Designed for academic achievements and scholarships',
        'Corporate Blue': 'Professional template for business and corporate awards',
        'Modern Elegant': 'Contemporary design for modern achievement recognition',
        'Classic Professional': 'Traditional professional template for any occasion',
        'Minimalist Clean': 'Simple, clean design for versatile use'
    };
    
    return descriptions[templateName] || 'Professional template for certificates';
}

function closeCertModal() {
    document.getElementById('cert-modal').classList.add('hidden');
    selectedTemplateId = null;
}

// Handle certificate generation form
document.getElementById('cert-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const token = localStorage.getItem('auth_token');
    
    // Construct the request data to match the API
    const requestData = {
        template_id: formData.get('templateId'),
        event_name: formData.get('courseName'),
        participant_names: [formData.get('recipientName')]
    };
    
    try {
        const response = await fetch('/api/certificates/generate', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Certificate generated successfully!');
            closeCertModal();
            // Redirect to certificates page or dashboard
            window.location.href = '/dashboard';
        } else {
            alert('Error generating certificate: ' + data.message);
        }
    } catch (error) {
        alert('Error generating certificate');
    }
});

function showError(message) {
    const grid = document.getElementById('templates-grid');
    grid.innerHTML = `
        <div class="col-span-full text-center py-12">
            <p class="text-red-600">${message}</p>
        </div>
    `;
}
</script>
